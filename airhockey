import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Set up display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Air Hockey Game")

# Game variables
paddle_width, paddle_height = 15, 100
puck_radius = 15
font = pygame.font.Font(None, 74)
clock = pygame.time.Clock()
winning_points = 5  # Default winning points

def draw_paddle(position):
    pygame.draw.rect(screen, BLUE, (position[0], position[1], paddle_width, paddle_height))

def draw_puck(position):
    pygame.draw.circle(screen, RED, (position[0], position[1]), puck_radius)

def display_scores(score1, score2):
    score_text = font.render(f"{score1} : {score2}", True, BLACK)
    screen.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, 20))

def reset_game():
    global puck_pos, puck_speed, player1_pos
    puck_pos = [WIDTH // 2, HEIGHT // 2]
    puck_speed = [random.choice([-4, 4]), random.choice([-4, 4])]
    player1_pos[1] = HEIGHT // 2 - paddle_height // 2

def bot_move():
    if puck_pos[1] > player2_pos[1] + paddle_height // 2 and player2_pos[1] < HEIGHT - paddle_height:
        player2_pos[1] += 3
    if puck_pos[1] < player2_pos[1] + paddle_height // 2 and player2_pos[1] > 0:
        player2_pos[1] -= 3

def choose_winning_points():
    global winning_points
    while True:
        screen.fill(WHITE)
        font_choice = pygame.font.Font(None, 50)
        points_text = font_choice.render(f"Enter winning points (default 5): {winning_points}", True, BLACK)
        screen.blit(points_text, (WIDTH // 2 - points_text.get_width() // 2, HEIGHT // 2 - 20))
        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key in (pygame.K_1, pygame.K_KP1):
                    winning_points = 1
                    return
                if event.key in (pygame.K_2, pygame.K_KP2):
                    winning_points = 2
                    return
                if event.key in (pygame.K_3, pygame.K_KP3):
                    winning_points = 3
                    return
                if event.key in (pygame.K_4, pygame.K_KP4):
                    winning_points = 4
                    return
                if event.key in (pygame.K_5, pygame.K_KP5):
                    winning_points = 5
                    return

def display_winner(winner_text):
    while True:
        screen.fill(WHITE)
        font_winner = pygame.font.Font(None, 74)
        winner_surface = font_winner.render(winner_text, True, BLACK)
        screen.blit(winner_surface, (WIDTH // 2 - winner_surface.get_width() // 2, HEIGHT // 2 - winner_surface.get_height() // 2))
        
        replay_text = font_winner.render("Press R to Replay or Q to Quit", True, BLACK)
        screen.blit(replay_text, (WIDTH // 2 - replay_text.get_width() // 2, HEIGHT // 2 + 50))
        
        pygame.display.flip()
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    return True  # Indicate to replay
                if event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()

def main():
    global puck_pos, player1_pos, player2_pos, score1, score2
    player1_pos = [50, HEIGHT // 2 - paddle_height // 2]
    player2_pos = [WIDTH - 50 - paddle_width, HEIGHT // 2 - paddle_height // 2]  # For the bot
    
    while True:
        score1, score2 = 0, 0  # Reset scores
        reset_game()
        choose_winning_points()  # Choose winning points

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()

            keys = pygame.key.get_pressed()
            if keys[pygame.K_w] and player1_pos[1] > 0:
                player1_pos[1] -= 5
            if keys[pygame.K_s] and player1_pos[1] < HEIGHT - paddle_height:
                player1_pos[1] += 5

            # Move puck
            puck_pos[0] += puck_speed[0]
            puck_pos[1] += puck_speed[1]

            # Collision with top and bottom walls
            if puck_pos[1] <= puck_radius or puck_pos[1] >= HEIGHT - puck_radius:
                puck_speed[1] = -puck_speed[1]

            # Collision with paddles
            if (player1_pos[0] < puck_pos[0] < player1_pos[0] + paddle_width and
                    player1_pos[1] < puck_pos[1] < player1_pos[1] + paddle_height) or \
                    (player2_pos[0] < puck_pos[0] < player2_pos[0] + paddle_width and
                    player2_pos[1] < puck_pos[1] < player2_pos[1] + paddle_height):
                puck_speed[0] = -puck_speed[0]

            # Update scores and reset puck if it goes out of bounds
            if puck_pos[0] < 0:
                score2 += 1
                reset_game()
            if puck_pos[0] > WIDTH:
                score1 += 1
                reset_game()

            # Check for winning condition
            if score1 >= winning_points or score2 >= winning_points:
                winner_text = f"Player wins!" if score1 >= winning_points else "Bot wins!"
                if display_winner(winner_text):  # Check if replay is requested
                    break  # Restart the game loop

            # Move bot
            bot_move()

            # Fill background
            screen.fill(WHITE)

            # Draw paddles and puck
            draw_paddle(player1_pos)
            draw_paddle(player2_pos)
            draw_puck(puck_pos)

            # Display scores
            display_scores(score1, score2)

            # Update display
            pygame.display.flip()
            
            # Tick clock
            clock.tick(60)

# Start the game
main()
pygame.quit()
